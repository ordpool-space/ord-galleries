name: Validate Gallery YAML

on:
  pull_request:
    paths:
      - 'galleries/*.yaml'
    types: [opened, synchronize]

  workflow_dispatch:
    inputs:
      pr_number:
        description: "Pull Request number to validate"
        required: true
        type: number

permissions:
  contents: read
  pull-requests: write

jobs:
  validate-gallery:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Determine PR Number
        id: pr_info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "pr_number=${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
          else
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout PR Branch (manual trigger only)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git fetch origin pull/${{ steps.pr_info.outputs.pr_number }}/head:pr_branch
          git checkout pr_branch

      - name: Determine YAML file
        id: yaml_file
        run: |
          yaml_file=$(git diff --name-only origin/main | grep '^galleries\/.*\.yaml$')
          file_count=$(echo "$yaml_file" | wc -l)
          if [[ "$file_count" -ne 1 ]]; then
            echo "yaml_file=" >> $GITHUB_OUTPUT
          else
            echo "yaml_file=$yaml_file" >> $GITHUB_OUTPUT
          fi

      - name: Validate YAML
        id: validation
        run: |
          yaml_file="${{ steps.yaml_file.outputs.yaml_file }}"
          ERRORS=""
          SUCCESS=""

          if [[ -z "$yaml_file" ]]; then
            ERRORS+="❌ Exactly one YAML file must be in 'galleries/'.\n"
          else
            SUCCESS+="✅ YAML file determined: $yaml_file\n"
            
            if ! yq eval "$yaml_file" >/dev/null 2>&1; then
              ERRORS+="❌ YAML syntax is invalid.\n"
            else
              SUCCESS+="✅ YAML syntax is valid.\n"
            fi

            if ! yq eval -o=json "$yaml_file" >/dev/null 2>&1; then
              ERRORS+="❌ YAML cannot be converted to JSON.\n"
            else
              SUCCESS+="✅ YAML converts successfully to JSON.\n"
            fi

            title=$(yq '.title' "$yaml_file")
            galleryId=$(yq '.galleryId' "$yaml_file")
            previewId=$(yq '.previewId' "$yaml_file")
            category=$(yq '.category' "$yaml_file")
            hex_pattern='^[0-9a-f]{64}i[0-9]+$'

            if [[ -z "$title" || "$title" == "null" ]]; then
              ERRORS+="❌ 'title' is required.\n"
            else
              SUCCESS+="✅ 'title' is present.\n"
            fi

            if ! [[ "$galleryId" =~ $hex_pattern ]]; then
              ERRORS+="❌ 'galleryId' must be a 64-char hex string followed by 'i' and a number.\n"
            else
              SUCCESS+="✅ 'galleryId' format is valid.\n"
            fi

            if [[ "$previewId" != "null" && ! "$previewId" =~ $hex_pattern ]]; then
              ERRORS+="❌ 'previewId' must be a 64-char hex string followed by 'i' and a number.\n"
            else
              SUCCESS+="✅ 'previewId' format is valid or not provided.\n"
            fi

            if [[ -z "$category" || "$category" == "null" ]]; then
              ERRORS+="❌ 'category' must have at least one entry.\n"
            else
              IFS=', ' read -ra categories <<< "$category"
              for cat in "${categories[@]}"; do
                if ! [[ "$cat" =~ ^[a-z]+$ ]]; then
                  ERRORS+="❌ Category '$cat' is invalid (lowercase letters only).\n"
                fi
              done
              if [[ "$ERRORS" != *"Category"* ]]; then
                SUCCESS+="✅ All categories valid.\n"
              fi
            fi
          fi

          if [[ -z "$ERRORS" ]]; then
            echo "result=success" >> $GITHUB_OUTPUT
          else
            echo "result=failure" >> $GITHUB_OUTPUT
          fi

          echo -e "errors<<EOF\n$ERRORS\nEOF" >> $GITHUB_OUTPUT
          echo -e "success<<EOF\n$SUCCESS\nEOF" >> $GITHUB_OUTPUT

      - name: Remove labels
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.removeLabel({
              issue_number: ${{ steps.pr_info.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'pr-valid'
            }).catch(() => {});
            
            await github.rest.issues.removeLabel({
              issue_number: ${{ steps.pr_info.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'pr-invalid'
            }).catch(() => {});

      - name: Comment results and manage labels
        uses: actions/github-script@v7
        with:
          script: |
            const body = `
            ## YAML Validation Results

            ### ✅ Successes:
            ${{ steps.validation.outputs.success }}

            ### ❌ Errors:
            ${{ steps.validation.outputs.errors }}

            [View Action Logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})

            `;

            await github.rest.issues.createComment({
              issue_number: ${{ steps.pr_info.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

            const label = '${{ steps.validation.outputs.result }}' === 'success' ? 'pr-valid' : 'pr-invalid';

            await github.rest.issues.addLabels({
              issue_number: ${{ steps.pr_info.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: [label]
            });
