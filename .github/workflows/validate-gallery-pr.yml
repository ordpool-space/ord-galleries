name: Validate Gallery YAML

on:
  pull_request:
    paths:
      - 'galleries/*.yaml'
    types: [opened, synchronize]

  workflow_dispatch:
    inputs:
      pr_number:
        description: "Pull Request number to validate"
        required: true
        type: number

permissions:
  contents: read
  pull-requests: write

jobs:
  validate-gallery:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Determine PR Number
        id: pr_info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "pr_number=${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
          else
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout PR Branch (manual trigger only)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git fetch origin pull/${{ steps.pr_info.outputs.pr_number }}/head:pr_branch
          git checkout pr_branch

      - name: Determine YAML file
        id: yaml_file
        run: |
          yaml_file=$(git diff --name-only origin/main | grep '^galleries\/.*\.yaml$')
          file_count=$(echo "$yaml_file" | wc -l)
          if [[ "$file_count" -ne 1 ]]; then
            echo "❌ PR must contain exactly one YAML file in 'galleries/' directory. Found: $file_count"
            exit 1
          fi
          echo "yaml_file=$yaml_file" >> $GITHUB_OUTPUT
          echo "✅ YAML file determined: $yaml_file"

      - name: Validate YAML syntax and JSON convertibility
        uses: mikefarah/yq@master
        with:
          cmd: |
            yaml_file=${{ steps.yaml_file.outputs.yaml_file }}
            yq eval "$yaml_file" >/dev/null || (echo "❌ YAML syntax validation failed. Please ensure the file is valid YAML." && exit 1)
            yq eval -o=json "$yaml_file" >/dev/null || (echo "❌ YAML cannot be converted to JSON. Check for incompatible YAML structures." && exit 1)
            echo "✅ YAML syntax and JSON conversion are valid."

      - name: Validate required fields and formats
        uses: mikefarah/yq@master
        with:
          cmd: |
            yaml_file=${{ steps.yaml_file.outputs.yaml_file }}

            title=$(yq '.title' "$yaml_file")
            galleryId=$(yq '.galleryId' "$yaml_file")
            previewId=$(yq '.previewId' "$yaml_file")
            category=$(yq '.category' "$yaml_file")

            hex_pattern='^[0-9a-f]{64}i[0-9]+$'

            if [[ -z "$title" || "$title" == "null" ]]; then
              echo "❌ 'title' is required and must not be empty."
              exit 1
            else
              echo "✅ 'title' is present."
            fi

            if ! [[ "$galleryId" =~ $hex_pattern ]]; then
              echo "❌ 'galleryId' must be exactly 64 hexadecimal characters followed by 'i' and a number (e.g., abc123...i0)."
              exit 1
            else
              echo "✅ 'galleryId' format is valid."
            fi

            if [[ "$previewId" != "null" && ! "$previewId" =~ $hex_pattern ]]; then
              echo "❌ 'previewId', if provided, must also be exactly 64 hexadecimal characters followed by 'i' and a number (e.g., abc123...i0)."
              exit 1
            else
              echo "✅ 'previewId' format is valid or not provided."
            fi

            if [[ -z "$category" || "$category" == "null" ]]; then
              echo "❌ 'category' is required and must contain at least one entry."
              exit 1
            else
              IFS=', ' read -ra categories <<< "$category"
              for cat in "${categories[@]}"; do
                if ! [[ "$cat" =~ ^[a-z]+$ ]]; then
                  echo "❌ Category '$cat' is invalid. Categories must only contain lowercase letters without spaces or special characters."
                  exit 1
                fi
              done
              echo "✅ All categories are valid."
            fi

      - name: Comment success on PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ steps.pr_info.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ YAML validation passed successfully!'
            })

      - name: Comment failure on PR
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ steps.pr_info.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ YAML validation failed. Please review the action logs, correct the errors, and push again.'
            })
